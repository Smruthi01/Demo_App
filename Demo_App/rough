# resource "aws_default_route_table" "main_rt" {
#   default_route_table_id = aws_vpc.Webapp_architecture
#   route {
#     cidr_block = "0.0.0.0/0"
#     gateway_id = aws_internet_gateway.igw.id
#   }
#   tags = {
#     "Name" = "publicrtbtable"
#   }
# }


# resource "aws_s3_bucket_website_configuration" "Webapp" {
 
  
#   bucket = "webapp"

#   index_document {
#     suffix = "index.html"
#   }

#   error_document {
#     key = "error.html"
#   }
# terraform state list | grep aws_instance
#   routing_rules = <<EOF
# [{
#     "Condition": {
#         "KeyPrefixEquals": "docs/"
#     },
#     "Redirect": {
#         "ReplaceKeyPrefixWith": ""
#     }
# }]
# EOF
# }



# variable "AWS_ACCESSKEY_ID" {
#   default = "AKIAZVBCVJRLC354BTJZ"
  
# }

# variable "AWS_SECRET_ACCESSKEY" {
#   default = "a1083MuPSwzDch7WViqBaq5AaE5gM7MxAXFnzNUE"
  
# }

//s3  webappelevate

# resource "aws_s3_bucket" "webappelevate" {
#   bucket = var.domain_s3


#   index_document {
#     suffix = "index.html"
#   }

#   error_document {
#     key = "error.html"
#   }

#     cors_rule {
#     allowed_headers = ["*"]
#     allowed_methods = ["GET","PUT", "POST"]
#     allowed_origins = ["*"]
#     max_age_seconds = 3000
#   }

#   tags = {
#     Name        = "webappelevate"
  
#   }
# }

# resource "aws_s3_bucket" "webappelevate_net" {
#   bucket = var.sub_domain_s3
#   availability_zone= var.az


#   index_document {
#     suffix = "index.html"
#   }

#   error_document {
#     key = "error.html"
#   }

#     cors_rule {
#     allowed_headers = ["*"]
#     allowed_methods = ["GET","PUT", "POST"]
#     allowed_origins = ["*"]
#     max_age_seconds = 3000
#   }

#   tags = {
#     Name        = "www.webappelevate.net"
  
#   }
# }


# resource "aws_cloudfront_distribution" "s3_distribution" {
#   origin {
#     domain_name              = aws_s3_bucket.webappelevate.bucket_regional_domain_name
#     origin_access_control_id = aws_cloudfront_origin_access_control.default.id
#     origin_id                = local.s3_origin_id
#   }

#   enabled             = true
#   is_ipv6_enabled     = true
#   comment             = "Some comment"
#   default_root_object = "index.html"


#  default_cache_behavior {
#     allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
#     cached_methods   = ["GET", "HEAD"]
#     target_origin_id = local.s3_origin_id

#     forwarded_values {
#       query_string = false

#       cookies {
#         forward = "none"
#       }
#     }

#     viewer_protocol_policy = "allow-all"
#     min_ttl                = 0
#     default_ttl            = 3600
#     max_ttl                = 86400
#   }

#    viewer_certificate {
#     cloudfront_default_certificate = true
#   }

# }

# module "s3-static-website" {
#   source  = "cn-terraform/s3-static-website/aws"
#   version = "1.0.2"

#   # insert the 2 required variables here
# }


# resource "aws_s3_bucket_object" "html" {
#   for_each = fileset("../../mywebsite/", "**/*.html")

#   bucket = aws_s3_bucket.mybucket.bucket
#   key    = each.value
#   source = "../../mywebsite/${each.value}"
#   etag   = filemd5("../../mywebsite/${each.value}")
#   content_type = "text/html"
# }

# resource "aws_s3_bucket_policy" "s3_access_for_cloudfront" {
#   bucket = aws_s3_bucket_website_configuration.wt-angular-bucket.id

#   policy = <<EOF

#     {
#     "Version": "2008-10-17",
#     "Id": "PolicyForCloudFrontPrivateContent",
#     "Statement": [
#         {
#             "Sid": "AllowCloudFrontServicePrincipal",
#             "Effect": "Allow",
#             "Principal": {
#                 "Service": "cloudfront.amazonaws.com"
#             },
#             "Action": "s3:GetObject",
#             "Resource": "arn:aws:s3:::wt-angular-bucket/*",
#             "Condition": {
#                 "StringEquals": {
#                     "AWS:SourceArn": "arn:aws:cloudfront::853973692277:distribution/E3K7GJ468CE0DX"
#                 }
#             }
#         }
#     ]
# }

#    EOF

# }



# resource "aws_subnet" "rds" {
#   count                   = "${length(data.aws_availability_zones.available.names)}"
#   vpc_id                  = "${aws_vpc.vpc.id}"
#   cidr_block              = "10.0.${length(data.aws_availability_zones.available.names) + count.index}.0/24"
#   map_public_ip_on_launch = true
#   availability_zone       = "${element(data.aws_availability_zones.available.names, count.index)}"
#   tags {
#     Name = "rds-${element(data.aws_availability_zones.available.names, count.index)}"
#   }
# }

# //net.tf
# resource "aws_db_subnet_group" "default" {
#   name        = "${var.rds_instance_identifier}-subnet-group"
#   description = "Terraform example RDS subnet group"
#   subnet_ids  = ["${aws_subnet.rds.*.id}"]
# }

# resource "aws_security_group" "rds" {
#   name        = "terraform_rds_security_group"
#   description = "Terraform example RDS MySQL server"
#   vpc_id      = "${aws_vpc.vpc.id}"
#   # Keep the instance private by only allowing traffic from the web server.
#   ingress {
#     from_port       = 3306
#     to_port         = 3306
#     protocol        = "tcp"
#     security_groups = ["${aws_security_group.default.id}"]
#   }
#   # Allow all outbound traffic.
#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }
#   tags {
#     Name = "terraform-example-rds-security-group"
#   }
# }

# resource "aws_db_instance" "default" {
#   identifier                = "${var.rds_instance_identifier}"
#   allocated_storage         = 5
#   engine                    = "mysql"
#   engine_version            = "5.6.35"
#   instance_class            = "db.t2.micro"
#   name                      = "${var.database_name}"
#   username                  = "${var.database_user}"
#   password                  = "${var.database_password}"
#   db_subnet_group_name      = "${aws_db_subnet_group.default.id}"
#   vpc_security_group_ids    = ["${aws_security_group.rds.id}"]
#   skip_final_snapshot       = true
#   final_snapshot_identifier = "Ignore"
# }

# resource "aws_db_parameter_group" "default" {
#   name        = "${var.rds_instance_identifier}-param-group"
#   description = "Terraform example parameter group for mysql5.6"
#   family      = "mysql5.6"
#   parameter {
#     name  = "character_set_server"
#     value = "utf8"
#   }
#   parameter {
#     name  = "character_set_client"
#     value = "utf8"
#   }
# }

# # resource "aws_s3_object" "my_file_on_s3" {
# #   bucket  = "my-bucket"
# #   key     = "my_filename_on_s3"
# #   //content = data.github_repository_file.my_file.content
# # }

# resource "aws_s3_bucket_object" "object1" {
# for_each = fileset("myfiles/", "*")
# bucket = module.s3_bucket.s3_bucket_id
# key = each.value
# source = "myfiles/${each.value}"
# etag = filemd5("myfiles/${each.value}")
# }


 
# resource "aws_s3_object" "my_file_on_s3" {
#   bucket  = "my-bucket"
#   key     = "my_filename_on_s3"
#   content = data.github_repository_file.my_file.content
# }



policy = <<EOF

    {
    "Version": "2008-10-17",
    "Id": "PolicyForCloudFrontPrivateContent",
    "Statement": [
        {
            "Sid": "AllowCloudFrontServicePrincipal",
            "Effect": "Allow",
            "Principal": {
                "Service": "cloudfront.amazonaws.com"
            },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::web-app-bucket-angular/*",
            "Condition": {
                "StringEquals": {
                    "AWS:SourceArn": "arn:aws:cloudfront::853973692277:distribution/E16R08NBHYTS82"
                }
            }
        }
    ]
}

  EOF
 
# resource "aws_s3_bucket_object" "js" {
#   for_each = fileset("/Users/presidio/book_webapp/webapp-SA-lt/webapp-sa-lt", "**/*.js")

#   bucket = aws_s3_bucket.fe_bucket.id
#   key    = each.value 
#   source = "/Users/presidio/book_webapp/webapp-SA-lt/webapp-sa-lt${each.value}"
#   //source = "../../mywebsite/${each.value}"
#   etag   = filemd5("/Users/presidio/book_webapp/webapp-SA-lt/webapp-sa-lt${each.value}")
#   content_type = "application/javascript"
# }

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "sts:AssumeRole"
            ],
            "Principal": {
                "Service": [
                    "ec2.amazonaws.com"
                ]
            }
        }
    ]
}

//default
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "sts:AssumeRole",
            "Principal": {
               "Service": "ec2.amazonaws.com"
            },
            "Effect": "Allow",
            "Sid": ""
        }
    ]
}


# //ec2 ssm routing_rules
# {
#     "Version": "2012-10-17",
#     "Statement": [
#       {
#         "Action": "sts:AssumeRole",
#         "Principal": {
#           "Service": "ec2.amazonaws.com"
#         },
#         "Effect": "Allow",
#         "Sid": ""
#       }
#     ]
#    }

# //cloudfront PolicyForCloudFrontPrivateContent
# # {
#     "Version": "2008-10-17",
#     "Id": "PolicyForCloudFrontPrivateContent",
#     "Statement": [
#         {
#             "Sid": "AllowCloudFrontServicePrincipal",
#             "Effect": "Allow",
#             "Principal": {
#                 "Service": "cloudfront.amazonaws.com"
#             },
#             "Action": "s3:GetObject",
#             "Resource": "arn:aws:s3:::web-app-bucket-angular/*",
#             "Condition": {
#                 "StringEquals": {
#                     "AWS:SourceArn": "arn:aws:cloudfront::853973692277:distribution/E16R08NBHYTS82"
#                 }
#             }
#         }
#     ]
# }

# to update teraform
# tfarc = 64
# tf env


# //del
# resource "aws_route53_record" "validation" {
#   zone_id = data.aws_route53_zone.selected.zone_id
#   name = aws_acm_certificate.acm_certificate.domain_validation_options.0.resource_record_name
#   type = aws_acm_certificate.acm_certificate.domain_validation_options.0.resource_record_type
#   records = ["${aws_acm_certificate.acm_certificate.domain_validation_options.0.resource_record_value}"]
#   ttl = "300"
# }


# data "aws_route53_zone" "selected" {
#   name         = "devops.coda.run"
  
#    private_zone = false
# }


# resource "aws_acm_certificate" "wt_certificate" {

#   domain_name       = aws_route53_record.wt-webapp-domain.name
#   validation_method = "DNS"
  

#    validation_option {
#     domain_name       =  aws_route53_record.wt-webapp-domain.name
#     validation_domain = "elevate.devops.coda.run"
#   }
#   lifecycle {
#     create_before_destroy = true
#   }
# }

# resource "aws_route53_record" "wt-webapp-domain" {
#   zone_id = data.aws_route53_zone.selected.zone_id
  //zone_id = aws_route53_zone.primary.zone_id
  //name    = "wt.elevate.devops.coda.run"
  //type    = "CNAME"
#   ttl = 60

#   allow_overwrite = true
#    name    = "${var.demo_dns_name}.${data.aws_route53_zone.public.name}"

  //name =  tolist(aws_acm_certificate.wt_certificate.domain_validation_options)[0].resource_record_name


#     records = [tolist(aws_acm_certificate.wt_certificate.domain_validation_options)[0].resource_record_value]
#  type = tolist(aws_acm_certificate.wt_certificate.domain_validation_options)[0].resource_record_type
#   set_identifier = "WT_webapp"
  //records        = ["d2alzvhtyozcv5.cloudfront.net"]

  #     weighted_routing_policy {
#     weight = 90
#   }
# }

# resource "aws_route53_record" "example" {
#   for_each = {
#     for dvo in aws_acm_certificate.wt_certificate.domain_validation_options : dvo.domain_name => {
#       name   = dvo.resource_record_name
#       record = dvo.resource_record_value
#       type   = dvo.resource_record_type
#     }
#   }

#   allow_overwrite = true
#   name            = each.value.name
#   records         = [each.value.record]
#   ttl             = 60
#   type            = each.value.type
#   zone_id         = data.aws_route53_zone.example.zone_id
# }



# resource "aws_acm_certificate_validation" "acm_cert_validate" {
#   certificate_arn = aws_acm_certificate.wt_certificate.arn
#   validation_record_fqdns = [aws_route53_record.wt-webapp-domain.fqdn]
# }

# resource "aws_route53_record" "hello_cert_dns" {
#   allow_overwrite = true
#   name =  tolist(aws_acm_certificate.acm_certificate.domain_validation_options)[0].resource_record_name
#   records = [tolist(aws_acm_certificate.acm_certificate.domain_validation_options)[0].resource_record_value]
#   type = tolist(aws_acm_certificate.hello_certificate.domain_validation_options)[0].resource_record_type
#   zone_id = aws_route53_zone.selected.zone_id
#   ttl = 60
# }
